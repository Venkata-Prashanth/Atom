%% File : encoder.tlc
%% Created : Sun Nov 19 18:23:54 2023
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "encoder.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  encoder "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
    %assign int16Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_INT16)
    %assign int8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_INT8)
    %assign intType = LibGetDataTypeNameFromId(::CompiledModel.tSS_INTEGER)
    %assign realType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)

  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    %assign hFileName = "encoder_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void encoder_Outputs_wrapper_accel(%<int16Type> *pos,
			const %<realType> *xD,
			const %<int8Type> *enc, const %<intType> p_width0,
			const %<int8Type> *pinA, const %<intType> p_width1,
			const %<int8Type> *pinB, const %<intType> p_width2);
    SFB_EXTERN_C void encoder_Update_wrapper_accel(%<int16Type> *pos,
			%<realType> *xD,
			const %<int8Type> *enc, const %<intType> p_width0,
			const %<int8Type> *pinA, const %<intType> p_width1,
			const %<int8Type> *pinB, const %<intType> p_width2);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "encoder_accel_wrapper"
    %openfile cFile = "%<cFileName>.c"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #include "%<hFileName>.h"
    

    extern void encoder_Start_wrapper(%<realType> *xD,
			const %<int8Type> *enc, const %<intType> p_width0,
			const %<int8Type> *pinA, const %<intType> p_width1,
			const %<int8Type> *pinB, const %<intType> p_width2);
    extern void encoder_Outputs_wrapper(%<int16Type> *pos,
			const %<realType> *xD,
			const %<int8Type> *enc, const %<intType> p_width0,
			const %<int8Type> *pinA, const %<intType> p_width1,
			const %<int8Type> *pinB, const %<intType> p_width2);
    extern void encoder_Terminate_wrapper(%<realType> *xD,
			const %<int8Type> *enc, const %<intType> p_width0,
			const %<int8Type> *pinA, const %<intType> p_width1,
			const %<int8Type> *pinB, const %<intType> p_width2);

    extern void encoder_Update_wrapper(%<int16Type> *pos,
			%<realType> *xD,
			const %<int8Type> *enc, const %<intType> p_width0,
			const %<int8Type> *pinA, const %<intType> p_width1,
			const %<int8Type> *pinB, const %<intType> p_width2);
    void encoder_Outputs_wrapper_accel(%<int16Type> *pos,
			const %<realType> *xD,
			const %<int8Type> *enc, const %<intType> p_width0,
			const %<int8Type> *pinA, const %<intType> p_width1,
			const %<int8Type> *pinB, const %<intType> p_width2){
    encoder_Outputs_wrapper(pos,
			xD,
			enc, p_width0,
			pinA, p_width1,
			pinB, p_width2);
    }

    void encoder_Update_wrapper_accel(%<int16Type> *pos,
			%<realType> *xD,
			const %<int8Type> *enc, const %<intType> p_width0,
			const %<int8Type> *pinA, const %<intType> p_width1,
			const %<int8Type> *pinB, const %<intType> p_width2){
    encoder_Update_wrapper(pos,
			xD,
			enc, p_width0,
			pinA, p_width1,
			pinB, p_width2);
    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>

  %else
  %openfile externs

    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif

    SFB_EXTERN_C void encoder_Start_wrapper(%<realType> *xD,
			const %<int8Type> *enc, const %<intType> p_width0,
			const %<int8Type> *pinA, const %<intType> p_width1,
			const %<int8Type> *pinB, const %<intType> p_width2);

    SFB_EXTERN_C void encoder_Outputs_wrapper(%<int16Type> *pos,
			const %<realType> *xD,
			const %<int8Type> *enc, const %<intType> p_width0,
			const %<int8Type> *pinA, const %<intType> p_width1,
			const %<int8Type> *pinB, const %<intType> p_width2);
    SFB_EXTERN_C void encoder_Update_wrapper(%<int16Type> *pos,
			%<realType> *xD,
			const %<int8Type> *enc, const %<intType> p_width0,
			const %<int8Type> *pinA, const %<intType> p_width1,
			const %<int8Type> *pinB, const %<intType> p_width2);

    SFB_EXTERN_C void encoder_Terminate_wrapper(%<realType> *xD,
			const %<int8Type> *enc, const %<intType> p_width0,
			const %<int8Type> *pinA, const %<intType> p_width1,
			const %<int8Type> *pinB, const %<intType> p_width2);

    #undef SFB_EXTERN_C
  %closefile externs
  %<LibCacheExtern(externs)>

  %endif
  %%
%endfunction

%% InitializeConditions =========================================================
%%
%function InitializeConditions(block, system) Output
    %assign realType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)
  /* %<Type> Block: %<Name> */
{
  %<realType> initVector[1] = {0};
  %assign rollVars = ["<dwork>/DSTATE"]
  %assign rollRegions = [0:%<LibBlockDWorkWidth(DSTATE)-1>]
  %roll sigIdx = rollRegions, lcv = 1, block, "Roller", rollVars
    %if %<LibBlockDWorkWidth(DSTATE)> == 1
      %<LibBlockDWork(DSTATE, "", lcv, sigIdx)> = initVector[0];
    %else
      %<LibBlockDWork(DSTATE, "", lcv, sigIdx)> = initVector[%<lcv>];
    %endif
  %endroll
}


%endfunction

%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
    %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else
    %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    encoder_Outputs_wrapper_accel(%<py0>, %<pxd>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>);
  %else
    encoder_Outputs_wrapper(%<py0>, %<pxd>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>);
  %endif

  %%
%endfunction

%% Function: Update ==========================================================
%% Abstract:
%%    Update
%%
%%
%function Update(block, system) Output
    /* S-Function "encoder_wrapper" Block: %<Name> */
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
    %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else
    %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
    %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    encoder_Update_wrapper_accel(%<py0>, %<pxd>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>);
  %else
    encoder_Update_wrapper(%<py0>, %<pxd>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>);
  %endif

  %%
%endfunction

%% [EOF] encoder.tlc

